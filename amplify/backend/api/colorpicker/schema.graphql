type Device @model {
  id: ID!
  thingName: String!
  friendlyName: String
  owner: String
}

type DeviceShadow @aws_iam @aws_cognito_user_pools {
  thingName: String!
  shadow: DeviceShadowDocument
}

type DeviceShadowDocument @aws_iam @aws_cognito_user_pools{
  desired: DeviceState
  reported: DeviceState
}

type DeviceState @aws_iam @aws_cognito_user_pools {
  color: String
  number: Int
  lightsOn: Boolean
}

input DeviceStateInput {
  color: String
  number: Int
  lightsOn: Boolean
}

type Mutation {
  updateDesiredState(thingName: String, state: DeviceStateInput): DeviceState! @function(name: "updateDesiredState-${env}") @aws_cognito_user_pools
  @auth(rules: [
    {allow: public, provider: iam}
  ])
  updateReportedState(thingName: String, state: DeviceStateInput): DeviceState! @function(name: "updateReportedState-${env}") @aws_iam
}

type Query {
  getDeviceShadow(thingName: String): DeviceShadow @function(name: "getDeviceShadow-${env}") @aws_cognito_user_pools
  @auth(rules: [
    {allow: public, provider: iam}
  ])
}